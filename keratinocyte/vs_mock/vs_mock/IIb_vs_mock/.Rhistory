# Check the version of pROC package
packageVersion("pROC")
# Check the version of randomForest package
packageVersion("randomForest")
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Combine UMAP results with metadata
umap_df <- cbind(umap_result$layout, metadata)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Combine UMAP results with metadata
umap_df <- cbind(umap_result$layout, metadata)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
View(gene_expression_data)
View(metadata)
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
install.packages("ape")
BiocManager::install("ape")
library(DOSE)
install.packages("BiocManager")
BiocManager::install("DOSE")
library(DOSE)
data(geneList)
de <- names(geneList)[1:100]
x <- enrichDO(de)
View(x)
x@result
cnetplot(x)
BiocManager::install("enrichplot")
cnetplot(x)
BiocManager::install("clusterProfiler")
cnetplot(x)
cnetplot(x)
#set the working directory
setwd("E:/DWCT/DEG/GSE219036_6_june/keratinocyte/vs_mock/vs_mock/IIb_vs_mock")
#set the working directory
setwd("E:/DWCT/DEG/GSE219036_6_june/keratinocyte/vs_mock/vs_mock/IIb_vs_mock")
count_data <- read.csv("count_keratinocyte.csv", header=TRUE,row.names = 1)
View(count_data)
# Print the modified data frame
print(count_data)
count_data1 <- read.csv("count_keratinocyte.csv")
#qnew <- count_data[count_data$GSM6765254 == 35.28909350,]
colnames(count_data)
head(count_data)
#load the sample info
sample_info1 <- read.csv("meta_keratinocyte.csv")
View(count_data1)
View(sample_info1)
