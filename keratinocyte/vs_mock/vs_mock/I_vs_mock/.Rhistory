corrplot(correlationMatrix, order = 'hclust',
addrect = 2, addCoef.col = 'white',
number.cex = 0.7)
#Now, we are ready to run DESeq2
library(DESeq2)
library(stats)
#create a DESeq dataset object from the count matrix and the colData
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = as.formula(designFormula))
#print dds object to see the contents
print(dds)
#For each gene, we count the total number of reads for that gene in all samples
#and remove those that don't have at least 1 read.
dds <- dds[ rowSums(DESeq2::counts(dds)) > 1, ]
dds <- DESeq(dds)
#compute the contrast for the 'group' variable where 'CTRL'
#samples are used as the control group.
DEresults = results(dds, contrast = c("group", 'CASE', 'CTRL'))
#sort results by increasing p-value
DEresults <- DEresults[order(DEresults$pvalue),]
#shows a summary of the results
print(DEresults)
library(DESeq2)
DESeq2::plotMA(object = dds, ylim = c(-5, 5))
library(ggplot2)
ggplot(data = as.data.frame(DEresults), aes(x = pvalue)) +
geom_histogram(bins = 100)
library(DESeq2)
# extract normalized counts from the DESeqDataSet object
countsNormalized <- DESeq2::counts(dds, normalized = TRUE)
# select top 500 most variable genes
selectedGenes <- names(sort(apply(countsNormalized, 1, var),
decreasing = TRUE)[1:500])
plotPCA(countsNormalized[selectedGenes,],
col = as.numeric(colData$group), adj = 0.5,
xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.6))
rld <- rlog(dds)
DESeq2::plotPCA(rld, ntop = 500, intgroup = 'group') +
ylim(-50, 50) + theme_bw()
library(EDASeq)
install.packages("EDASeq")
library(EDASeq)
plotPCA(countsNormalized[selectedGenes,],
col = as.numeric(colData$group), adj = 0.5,
xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.6))
# Load required libraries
library(GEOquery)
library(limma)
library(umap)
# Load series and platform data from GEO
gset <- getGEO("GSE24125", GSEMatrix = TRUE, AnnotGPL = FALSE)
if (length(gset) > 1)
idx <- grep("GPL10914", attr(gset, "names"))
# Load required libraries
library(GEOquery)
install.packages("GEOquery")
# Load required libraries
library(GEOquery)
# Load required libraries
BiocManager::install("GEOquery")
library(GEOquery)
install.packages("vctrs")
install.packages("vctrs")
library(GEOquery)
library(limma)
library(umap)
# Load series and platform data from GEO
gset <- getGEO("GSE24125", GSEMatrix = TRUE, AnnotGPL = FALSE)
library(GEOquery)
# Load required libraries
BiocManager::install("GEOquery")
library(GEOquery)
# Load series and platform data from GEO
gset <- getGEO("GSE24125", GSEMatrix = TRUE, AnnotGPL = FALSE)
library(GEOquery)
install.packages("vctrs")
install.packages("vctrs")
library(GEOquery)
install.packages("vctrs", version = "0.6.3")
install.packages("vctrs", version = "0.6.3")
library(GEOquery)
library(GEOquery)
library(limma)
library(umap)
# Load series and platform data from GEO
gset <- getGEO("GSE24125", GSEMatrix = TRUE, AnnotGPL = FALSE)
if (length(gset) > 1)
idx <- grep("GPL10914", attr(gset, "names"))
else
if (length(gset) > 1) {
idx <- grep("GPL10914", attr(gset, "names"))
} else {
idx <- 1
}
gset <- gset[[idx]]
View(gset)
View(gset)
# Make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# Group membership for all samples
gsms <- "01110111010011011010001000110100101"
sml <- strsplit(gsms, split = "")[[1]]
# Log2 transformation
ex <- exprs(gset)
View(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm = TRUE))
LogC <- (qx[5] > 100) || (qx[6] - qx[1] > 50 && qx[2] > 0)
if (LogC) {
ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex)
}
View(ex)
# Calculate log2fold change values
log2fold_change <- log2(exprs(gset)[, sml == "1"]) - log2(exprs(gset)[, sml == "0"])
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Dermal Fibroblast", "Macrophage"))
levels(gs) <- groups
#############
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Dermal Fibroblast", "Macrophage"))
levels(gs) <- groups
# Check the lengths of gs and gset
if (length(gs) != ncol(exprs(gset))) {
stop("The number of groups does not match the number of samples in gset.")
}
gset$group <- gs
##############
gset$group <- gs
design <- model.matrix(~group + 0, gset)
View(design)
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
#   Differential expression analysis with DESeq2
library(DESeq2)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE219036", "file=GSE219036_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
View(tbl)
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
View(annot)
# sample selection
gsms <- "000111222333XXXXX"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("mock","iia","iib","i"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
sel
apath
groups
gs
gsms
sel
sml
urld
View(sample_info)
View(tbl)
View(annot)
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="LRT", reduced = ~ 1)  # Use LRT for all-around gene ranking
# extract results for top genes table
r <- results (ds, alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","stat","baseMean","Symbol","Description"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
plotDispEsts(ds, main="GSE219036 Dispersion Estimates")
# create histogram plot of p-values
hist(r$padj, breaks=seq(0, 1, length = 21), col = "grey", border = "white",
xlab = "", ylab = "", main = "GSE219036 Frequencies of padj-values")
# Wald test to obtain contrast-specific results
ds <- DESeq(ds, test="Wald", sfType="poscount")
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod = "fdr")
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log2FoldChange, -log10(padj), pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
# MD plot
par(mar=c(4,4,2,1), cex.main=1.5)
plot(log10(r$baseMean), r$log2FoldChange, main=paste(groups[1], "vs", groups[2]),
xlab="log10(mean of normalized counts)", ylab="log2FoldChange", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log10(baseMean), log2FoldChange, pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
abline(h=0)
palette(old.pal) # restore palette
# Venn diagram
library(gplots)
all_res <- list()
ct.names <- resultsNames(ds)[-1] # contrasts names without Intercept
for (ct in ct.names) {
r <- results(ds, name=ct, alpha=0.05, pAdjustMethod = "fdr")
all_res[[length(all_res) + 1]] <- rownames(r)[!is.na(r$padj) & r$padj < 0.05 & abs(r$log2FoldChange) >= 0]
}
names(all_res) <- ct.names
venn(all_res)
################################################################
#   General expression data visualization
dat <- log10(counts(ds, normalized = T) + 1) # extract normalized counts
# box-and-whisker plot
lbl <- "log10(raw counts + 1)"
ord <- order(gs)  # order samples by group
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
#   Differential expression analysis with DESeq2
library(DESeq2)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE219036", "file=GSE219036_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "000111222333XXXXX"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("mock","iia","iib","i"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="LRT", reduced = ~ 1)  # Use LRT for all-around gene ranking
# extract results for top genes table
r <- results (ds, alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","stat","baseMean","Symbol","Description"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
plotDispEsts(ds, main="GSE219036 Dispersion Estimates")
# create histogram plot of p-values
hist(r$padj, breaks=seq(0, 1, length = 21), col = "grey", border = "white",
xlab = "", ylab = "", main = "GSE219036 Frequencies of padj-values")
# Wald test to obtain contrast-specific results
ds <- DESeq(ds, test="Wald", sfType="poscount")
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod = "fdr")
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log2FoldChange, -log10(padj), pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
# MD plot
par(mar=c(4,4,2,1), cex.main=1.5)
plot(log10(r$baseMean), r$log2FoldChange, main=paste(groups[1], "vs", groups[2]),
xlab="log10(mean of normalized counts)", ylab="log2FoldChange", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log10(baseMean), log2FoldChange, pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
abline(h=0)
palette(old.pal) # restore palette
# Venn diagram
library(gplots)
all_res <- list()
ct.names <- resultsNames(ds)[-1] # contrasts names without Intercept
for (ct in ct.names) {
r <- results(ds, name=ct, alpha=0.05, pAdjustMethod = "fdr")
all_res[[length(all_res) + 1]] <- rownames(r)[!is.na(r$padj) & r$padj < 0.05 & abs(r$log2FoldChange) >= 0]
}
names(all_res) <- ct.names
venn(all_res)
################################################################
#   General expression data visualization
dat <- log10(counts(ds, normalized = T) + 1) # extract normalized counts
# box-and-whisker plot
lbl <- "log10(raw counts + 1)"
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
boxplot(dat[,ord], boxwex=0.6, notch=T, main="GSE219036", ylab="lg(norm.counts)", outline=F, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
# UMAP plot (multi-dimensional scaling)
library(umap)
dat <- dat[!duplicated(dat), ] # first remove duplicates
par(mar=c(3,3,2,6), xpd=TRUE, cex.main=1.5)
ump <- umap(t(dat), n_neighbors = 5, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=5", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=groups, pch=20,
col=1:length(groups), title="Group", pt.cex=1.5)
library(DESeq2)
library(DESeq2)
library(pheatmap)
# Specify the file path to your TSV file
file_path <- "D:/JP_MHB/AlphaMissense_aa_substitutions.tsv"
# Using read.table()
data <- read.table(file_path, header = TRUE, sep = "\t")
View(data)
write.csv(data,file="AlphaMissense_aa_substitutions")
write.csv(data,"AlphaMissense_aa_substitutions.csv", row.names = FALSE)
# Specify the file path to your TSV file
file_path <- "D:/JP_MHB/AlphaMissense_aa_substitutions.tsv"
getwd()
# Install and load the clusterProfiler package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
# Load your gene list
my_gene_list <- c("WDR37", "NFAT5", "ICAM5", "ICAM5",
"ICAM5", "ELL", "PLAGL1", "DHX38", "GATA6", "ZNF212", "CBX6")  # Replace with your gene symbols
# Load the gene-to-GO mapping data (use the appropriate organism database)
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "BP",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
# View the results using as.data.frame
result_df <- as.data.frame(go_enrichment)
# View the results
print(result_df)
View(go_enrichment)
go_enrichment@result
# View the results
summary(go_enrichment)
# View the results using as.data.frame
result_df <- as.data.frame(go_enrichment)
# View the results
print(result_df)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "MF",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "CC",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
View(go_enrichment)
go_enrichment@result[["Description"]]
x<-go_enrichment@result
View(x)
clear
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
#set the working directory
setwd("D:/DWCT/DEG/GSE219036_6_june/keratinocyte/vs_mock/vs_mock/IIb_vs_mock")
#load the count data
count_data <- read.csv("count_keratinocyte.csv", header=TRUE,row.names = 1)
count_data1 <- read.csv("count_keratinocyte.csv")
#qnew <- count_data[count_data$GSM6765254 == 35.28909350,]
colnames(count_data)
head(count_data)
library(stats)
library(dplyr)
mydata = count_data
cor(mydata)
mean(cor(mydata))
pca = princomp(mydata)
pca$loadings
pc=pca$scores
view(pc)
print(pc)
cor(pc)
# Plot the principal component scores for the first two components
plot(pc[, 1], pc[, 2], xlab = "PC1", ylab = "PC2", main = "Principal Component Scores")
var1<-round(pca$sdev[1]^2/sum(pca$sdev^2)*100,2)
var2<-round(pca$sdev[2]^2/sum(pca$sdev^2)*100,2)
plot(pca)
library("factoextra")
fviz_eig(pca)
biplot(pca)
install.packages("ggfortify")
library(ggfortify)
library(ggfortify)
autoplot(pca)
pc<-prcomp(count_data,center = TRUE,scale. = TRUE)
summary(pc)
attributes(pc)
print(pc)
var1<- round(pc$sdev[1]^2/sum(pc$sdev^2)*100,2)
var2<- round(pc$sdev[2]^2/sum(pc$sdev^2)*100,2)
library("ggfortify")
autoplot(pc)
autoplot(pc,scale = 0)
# transpose the data because in variance_stabilised_counts the rows are the variables and the columns correspond to the samples
t_variance_stabilised_counts <- t(count_data)
# before computing the PCA, check that samples are in rows and genes in columns
pca_results <- mypca(t_variance_stabilised_counts,
center = TRUE,
scale = TRUE)
install.packages("mypca")
library("mypca")
BiocManager::install("mypca")
library("mypca")
# before computing the PCA, check that samples are in rows and genes in columns
pca_results <- myPCA(t_variance_stabilised_counts,
center = TRUE,
scale = TRUE)
BiocManager::install("myPCA")
library("myPCA")
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
getwd()
#set the working directory
setwd("D:/DWCT/DEG/GSE219036_6_june/keratinocyte/vs_mock/vs_mock/I_vs_mock")
#load the count data
count_data <- read.csv("count_keratinocyte.csv", header=TRUE,row.names = 1)
colnames(count_data)
head(count_data)
#load the sample info
sample_info1 <- read.csv("meta_keratinocyte.csv")
sample_info <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colData1 <- read.csv("meta_keratinocyte.csv", header = T, sep = '\t',
stringsAsFactors = TRUE)
colData <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
#set factor levels
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Cell_type <- factor(sample_info$Cell_type)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$Treatment)
unique(sample_info$Cell_type)
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ Treatment)
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
dds$Treatment <- factor(dds$Treatment, levels = c ("mock","MPXV clade I infected", "MPXV clade IIb infected", "MPXV clade IIa infected"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$Treatment <- relevel(dds$Treatment , ref = "mock")
dds$Treatment
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
write.csv(normalize_counts,"normalized_counts_keratinocyte_I_vs_mo
rld_ds <- rlog(dds, blind=FALSE) #regularized log-transformation
rld_ds <- rlog(dds, blind=FALSE) #regularized log-transformation
rld_ds <- rlog(dds, blind=FALSE) #regularized log-transformation
clearPushBack()
clearPushBack()
