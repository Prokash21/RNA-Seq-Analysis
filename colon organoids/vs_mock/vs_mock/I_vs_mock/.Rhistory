scree_data <- data.frame(
PC = 1:ncol(sample_data_scaled),
VarianceExplained = (pca_result$rotation^2) / sum(pca_result$rotation^2)
)
# Plot the scree plot
ggplot(data = scree_data, aes(x = PC, y = VarianceExplained)) +
geom_bar(stat = "identity") +
labs(title = "Scree Plot", x = "Principal Component (PC)", y = "Variance Explained")
# You can also visualize the PCA results with a biplot
biplot(pca_result)
# Access the scores and loadings of the principal components
scores <- pca_result$x  # Scores (sample projections onto PCs)
loadings <- pca_result$rotation  # Loadings (correlation between variables and PCs)
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with only sample data as dots
plot(pca_result$rotation[,1], pca_result$rotation[,2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with labeled sample data points
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
#set the working directory
setwd("D:/DWCT/DEG/GSE219036_6_june/colon organoids/vs_mock/vs_mock/I_vs_mock")
#load the count data
count_data <- read.csv("count_colon.csv", header=TRUE,row.names = 1)
colnames(count_data)
head(count_data)
#load the sample info
sample_info1 <- read.csv("meta_colon.csv")
sample_info <- read.csv("meta_colon.csv", header = TRUE,row.names = 1)
colData1 <- read.csv("meta_colon.csv", header = T, sep = '\t',
stringsAsFactors = TRUE)
colData <- read.csv("meta_colon.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
#set factor levels
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Cell_type <- factor(sample_info$Cell_type)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$Treatment)
unique(sample_info$Cell_type)
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ Treatment)
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
dds$Treatment <- factor(dds$Treatment, levels = c ("mock","MPXV clade I infected", "MPXV clade IIb infected", "MPXV clade IIa infected"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$Treatment <- relevel(dds$Treatment , ref = "mock")
dds$Treatment
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
count_data1 <- read.csv("count_colon.csv")
# Extract the columns containing sample data
sample_data <- count_data1[, 2:13]
# Standardize the data (mean center and scale to unit variance)
sample_data_scaled <- scale(sample_data)
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Plot the variance explained by each principal component
summary(pca_result)
# Create a scree plot to visualize the explained variance
scree_data <- data.frame(
PC = 1:ncol(sample_data_scaled),
VarianceExplained = (pca_result$rotation^2) / sum(pca_result$rotation^2)
)
# Plot the scree plot
ggplot(data = scree_data, aes(x = PC, y = VarianceExplained)) +
geom_bar(stat = "identity") +
labs(title = "Scree Plot", x = "Principal Component (PC)", y = "Variance Explained")
# Access the scores and loadings of the principal components
scores <- pca_result$x  # Scores (sample projections onto PCs)
loadings <- pca_result$rotation  # Loadings (correlation between variables and PCs)
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with only sample data as dots
plot(pca_result$rotation[,1], pca_result$rotation[,2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with labeled sample data points
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
# Add text labels to the data points
text(pca_result$rotation[, 1], pca_result$rotation[, 2], labels = colnames(sample_data), pos = 3, cex = 0.7)
# Create a vector of colors for the four groups
group_colors <- c("red", "blue", "green", "purple")
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with labeled sample data points, colored by groups
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = group_colors, xlab = "PC1", ylab = "PC2", main = "PCA Plot of Keratinocyte Raw Count")
# Add text labels to the data points
text(pca_result$rotation[, 1], pca_result$rotation[, 2], labels = colnames(sample_data), pos = 3, cex = 0.7)
# Create a legend
legend("topleft", legend = c("Mock", "IIa", "IIb", "I"), fill = group_colors)
#load the count data
count_data <- read.csv("count_keratinocyte.csv", header=TRUE,row.names = 1)
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
#set the working directory
setwd("D:/DWCT/DEG/GSE219036_6_june/keratinocyte/vs_mock/vs_mock/IIb_vs_mock")
#load the count data
count_data <- read.csv("count_keratinocyte.csv", header=TRUE,row.names = 1)
# Print the modified data frame
print(count_data)
count_data1 <- read.csv("count_keratinocyte.csv")
#qnew <- count_data[count_data$GSM6765254 == 35.28909350,]
colnames(count_data)
head(count_data)
#load the sample info
sample_info1 <- read.csv("meta_keratinocyte.csv")
sample_info <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colData1 <- read.csv("meta_keratinocyte.csv", header = T, sep = '\t',
stringsAsFactors = TRUE)
colData <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
#set factor levels
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Cell_type <- factor(sample_info$Cell_type)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$Treatment)
unique(sample_info$Cell_type)
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ Treatment)
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
dds$Treatment <- factor(dds$Treatment, levels = c ("mock","MPXV clade I infected", "MPXV clade IIb infected", "MPXV clade IIa infected"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$Treatment <- relevel(dds$Treatment , ref = "mock")
dds$Treatment
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
write.csv(normalize_counts,"normalized_counts_keratinocyte_IIb_vs_mock.csv")
X<-as.data.frame(dds)
rld_ds <- rlog(dds, blind=FALSE, normalized = FALSE) #regularized log-transformation
# Step 3: Extract normalized counts
normalized_counts <- counts(dds, normalized = TRUE)
# Step 4: Perform PCA on the normalized counts
pca_result <- prcomp(t(normalized_counts))
pca_result1 <- prcomp(t(normalized_counts1))
# Step 5: Plot PCA
plot(pca_result$x[,1], pca_result$x[,2],
xlab = paste0("PC1: ", round(summary(pca_result)$importance[2,1] * 100, 2), "% variance"),
ylab = paste0("PC2: ", round(summary(pca_result)$importance[2,2] * 100, 2), "% variance"),
main = "PCA Plot of Raw Count Data",
pch = 19)
# Step 5: Plot PCA
plot(pca_result$x[,1], pca_result$x[,2],
xlab = paste0("PC1: ", round(summary(pca_result)$importance[2,1] * 100, 2), "% variance"),
ylab = paste0("PC2: ", round(summary(pca_result)$importance[2,2] * 100, 2), "% variance"),
main = "PCA Plot of Raw Count Data",
pch = 19,
labels = colnames(sample_data))
# Adding labels to points
text(pca_result$x[,1], pca_result$x[,2], labels = colnames(sample_data), pos = 1)
# Step 5: Plot PCA
plot(pca_result$x[,1], pca_result$x[,2],
xlab = paste0("PC1: ", round(summary(pca_result)$importance[2,1] * 100, 2), "% variance"),
ylab = paste0("PC2: ", round(summary(pca_result)$importance[2,2] * 100, 2), "% variance"),
main = "PCA Plot of Raw Count Data",
pch = 19)
# Adding labels to points
text(pca_result$x[,1], pca_result$x[,2], labels = colnames(sample_data), pos = 1)
rld <- vst(dds)
DESeq2::plotPCA(rld, ntop = 500, intgroup = 'Treatment') +
ylim(-25, 25) + theme_bw()
# Extract percent variance
percentVar <- round(100 * attr(pcadata, "percentVar"))
# Plot PCA using ggplot2
ggplot(pcadata, aes(PC1, PC2, color = Treatment, label = name)) +
geom_point(size = 3) +
geom_text(hjust = 0.5, vjust = -1, size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance"))
# Step 1: Create a DESeqDataSet object from your raw count data
dds <- DESeqDataSetFromMatrix(countData = your_raw_counts_matrix,
colData = your_sample_metadata,
design = ~ condition)
head(assay(vsd),3)
#Variance stabilizing transformation
vsd <- vst (dds,blind = FALSE)
head(assay(vsd),3)
meanSdPlot(assay(vsd))
#use transformed values to generate a pcs plot
plotPCA(vsd,intgroup=c("Cell_type", "Treatment"))
raw_counts <- counts(dds,normalized=FALSE)
View(raw_counts)
vsd_raw <- vst(assay(dds), blind = FALSE)
#
plotPCA(vsd_raw,intgroup=c("Cell_type", "Treatment"))
View(vsd_raw)
View(vsd)
View(vsd_raw)
View(vsd_raw)
write.csv(vsd_raw ,file = "vsd_raw.csv")
# Assuming your count matrix is stored in a variable called 'count_matrix'
# Replace 'count_matrix' with your actual variable name
Xx<-read.csv("vsd_raw.csv")
# Extract the columns containing sample data
sample_data <- Xx[, 2:13]
# Standardize the data (mean center and scale to unit variance)
sample_data_scaled <- scale(sample_data)
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Plot the variance explained by each principal component
summary(pca_result)
# Create a scree plot to visualize the explained variance
scree_data <- data.frame(
PC = 1:ncol(sample_data_scaled),
VarianceExplained = (pca_result$rotation^2) / sum(pca_result$rotation^2)
)
# Plot the scree plot
ggplot(data = scree_data, aes(x = PC, y = VarianceExplained)) +
geom_bar(stat = "identity") +
labs(title = "Scree Plot", x = "Principal Component (PC)", y = "Variance Explained")
# You can also visualize the PCA results with a biplot
biplot(pca_result)
# Access the scores and loadings of the principal components
scores <- pca_result$x  # Scores (sample projections onto PCs)
loadings <- pca_result$rotation  # Loadings (correlation between variables and PCs)
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with only sample data as dots
plot(pca_result$rotation[,1], pca_result$rotation[,2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with labeled sample data points
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = "blue", xlab = "PC1", ylab = "PC2", main = "PCA Plot")
# Add text labels to the data points
text(pca_result$rotation[, 1], pca_result$rotation[, 2], labels = colnames(sample_data), pos = 3, cex = 0.7)
# Create a vector of colors for the four groups
group_colors <- c("red", "blue", "green", "purple")
# Perform PCA
pca_result <- prcomp(sample_data_scaled)
# Create a PCA plot with labeled sample data points, colored by groups
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = group_colors, xlab = "PC1", ylab = "PC2", main = "PCA Plot of Keratinocyte Raw Count")
# Add text labels to the data points
text(pca_result$rotation[, 1], pca_result$rotation[, 2], labels = colnames(sample_data), pos = 3, cex = 0.7)
# Create a legend
legend("topleft", legend = c("Mock", "IIa", "IIb", "I"), fill = group_colors)
# Create a PCA plot with labeled sample data points, colored by groups
plot(pca_result$rotation[, 1], pca_result$rotation[, 2], pch = 19, col = group_colors, xlab = "PC1", ylab = "PC2", main = "PCA Plot of Keratinocyte Raw Count")
#use transformed values to generate a pcs plot
plotPCA(vsd,intgroup=c("Cell_type", "Treatment"))
# Step 3: Extract normalized counts
normalized_counts <- counts(dds, normalized = TRUE)
# Step 4: Perform PCA on the normalized counts
pca_result <- prcomp(t(normalized_counts))
# Step 5: Plot PCA
plot(pca_result$x[,1], pca_result$x[,2],
xlab = paste0("PC1: ", round(summary(pca_result)$importance[2,1] * 100, 2), "% variance"),
ylab = paste0("PC2: ", round(summary(pca_result)$importance[2,2] * 100, 2), "% variance"),
main = "PCA Plot of Raw Count Data",
pch = 19)
normalized_counts1 <- counts(dds, normalized = FALSE)
pca_result1 <- prcomp(t(normalized_counts1))
# Step 5: Plot PCA
plot(pca_result$x[,1], pca_result$x[,2],
xlab = paste0("PC1: ", round(summary(pca_result)$importance[2,1] * 100, 2), "% variance"),
ylab = paste0("PC2: ", round(summary(pca_result)$importance[2,2] * 100, 2), "% variance"),
main = "PCA Plot of Raw Count Data",
pch = 19)
View(count_data)
View(XXX)
#Variance stabilizing transformation
vsd <- vst (dds,blind = FALSE)
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
#set the working directory
setwd("D:/DWCT/DEG/GSE219036_6_june/colon organoids/vs_mock/vs_mock/I_vs_mock")
#load the count data
count_data <- read.csv("count_colon.csv", header=TRUE,row.names = 1)
count_data1 <- read.csv("count_colon.csv")
colnames(count_data)
head(count_data)
#load the sample info
sample_info1 <- read.csv("meta_colon.csv")
sample_info <- read.csv("meta_colon.csv", header = TRUE,row.names = 1)
colData1 <- read.csv("meta_colon.csv", header = T, sep = '\t',
stringsAsFactors = TRUE)
colData <- read.csv("meta_colon.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
#set factor levels
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Cell_type <- factor(sample_info$Cell_type)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$Treatment)
unique(sample_info$Cell_type)
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ Treatment)
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
dds$Treatment <- factor(dds$Treatment, levels = c ("mock","MPXV clade I infected", "MPXV clade IIb infected", "MPXV clade IIa infected"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$Treatment <- relevel(dds$Treatment , ref = "mock")
dds$Treatment
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
write.csv(normalize_counts,"normalized_counts_colon_I_vs_mock.csv")
#Variance stabilizing transformation
vsd <- vst (dds,blind = FALSE)
#use transformed values to generate a pcs plot
plotPCA(vsd,intgroup=c("Cell_type", "Treatment"))
# PCA plot
# Plot PCA with different layout
plotPCA(vsd, intgroup = c("Cell_type", "Treatment"), layout = "ellipse")
# Perform PCA on the transformed values
pca <- prcomp(t(assay(vsd)))
# Plot PCA with different parameters
plot(pca$x[, 1], pca$x[, 2],
xlab = "PC1", ylab = "PC2",
main = "PCA Plot",
col = c("red", "blue")[factor(dds$Cell_type)],
pch = c(16, 17)[factor(dds$Treatment)])
legend("topright", legend = levels(dds$Cell_type), col = c("red", "blue"), pch = 16)
legend("bottomleft", legend = levels(dds$Treatment), col = 1:2, pch = c(16, 17))
# Perform PCA on the transformed values
pca <- prcomp(t(assay(vsd)))
View(pca)
#Variance stabilizing transformation
vsd <- vst (dds,blind = FALSE)
View(vsd)
View(dds)
raw_counts <- counts(dds,normalized=FALSE)
View(count_data)
# Load required libraries
library(DESeq2)
library(ggplot2)
# Get normalized counts
normalized_counts <- counts(dds, normalized = TRUE)
# Get raw counts
raw_counts <- counts(dds, normalized = FALSE)
# Perform PCA on normalized counts
pca_normalized <- prcomp(t(normalized_counts))
# Perform PCA on raw counts
pca_raw <- prcomp(t(raw_counts))
# Function to plot PCA
plot_pca <- function(pca_data, title) {
pca_df <- as.data.frame(pca_data$x)
ggplot(pca_df, aes(x = PC1, y = PC2)) +
geom_point() +
labs(title = title,
x = paste0("PC1 (", round(100 * summary(pca_data)$importance[2,1], 1), "%)"),
y = paste0("PC2 (", round(100 * summary(pca_data)$importance[2,2], 1), "%)"))
}
# Plot PCA for normalized counts
plot_normalized <- plot_pca(pca_normalized, "PCA Plot: Normalized Counts")
# Plot PCA for raw counts
plot_raw <- plot_pca(pca_raw, "PCA Plot: Raw Counts")
# Display the plots
plot_normalized
plot_raw
# Function to plot PCA with sample labels
plot_pca <- function(pca_data, title, labels) {
pca_df <- as.data.frame(pca_data$x)
pca_df$sample <- labels
ggplot(pca_df, aes(x = PC1, y = PC2, label = sample)) +
geom_point() +
geom_text(nudge_x = 0.1, nudge_y = 0.1) +
labs(title = title,
x = paste0("PC1 (", round(100 * summary(pca_data)$importance[2,1], 1), "%)"),
y = paste0("PC2 (", round(100 * summary(pca_data)$importance[2,2], 1), "%)"))
}
# Extract sample names
sample_names <- colnames(normalized_counts)
# Plot PCA for normalized counts with sample labels
plot_normalized <- plot_pca(pca_normalized, "PCA Plot: Normalized Counts", sample_names)
# Plot PCA for raw counts with sample labels
plot_raw <- plot_pca(pca_raw, "PCA Plot: Raw Counts", sample_names)
# Display the plots
plot_normalized
plot_raw
# Get VSD (Variance Stabilizing Transformation)
vsd <- vst(dds, blind = FALSE)
# Perform PCA on VSD
pca_vsd <- prcomp(assay(vsd))
# Function to plot PCA with sample labels
plot_pca_vsd <- function(pca_data, title, labels) {
pca_df <- as.data.frame(pca_data$x)
pca_df$sample <- labels
ggplot(pca_df, aes(x = PC1, y = PC2, label = sample)) +
geom_point() +
geom_text(nudge_x = 0.1, nudge_y = 0.1) +
labs(title = title,
x = paste0("PC1 (", round(100 * summary(pca_data)$importance[2,1], 1), "%)"),
y = paste0("PC2 (", round(100 * summary(pca_data)$importance[2,2], 1), "%)"))
}
# Extract sample names
sample_names <- colnames(assay(vsd))
# Plot PCA for VSD with sample labels
plot_vsd <- plot_pca_vsd(pca_vsd, "PCA Plot: VSD", sample_names)
# Display the plot
plot_vsd
# Compute VSD for normalized counts
vsd_normalized <- varianceStabilizingTransformation(dds, blind=TRUE)
View(vsd_normalized)
# Compute VSD for raw counts
vsd_raw <- varianceStabilizingTransformation(dds, blind=TRUE, fitType="parametric")
# Plot PCA for normalized counts
plotPCA(vsd_normalized, intgroup = NULL, main = "PCA Plot: Normalized Data")
plotPCA(vsd_normalized,intgroup=c("Cell_type", "Treatment"))
plotPCA(vsd_raw,intgroup=c("Cell_type", "Treatment"))
View(vsd_normalized)
vsd_normalized@assays
as.data.frame(vsd_normalized)
#Variance stabilizing transformation
vsd <- vst (dds,blind = FALSE)
#use transformed values to generate a pcs plot
plotPCA(vsd,intgroup=c("Cell_type", "Treatment"))
# Load the package
library(DESeq2)
# Get the version of the package
package_version <- packageVersion("DESeq2")
print(paste("Version:", package_version))
# Get the citation information
package_citation <- citation("DESeq2")
print(package_citation)
# Load the package
library(GEOquery )
# Load the package
library(GEOquery)
# Get the version of the package
package_version <- packageVersion("GEOquery")
print(paste("Version:", package_version))
# Get the citation information
package_citation <- citation("GEOquery")
print(package_citation)
R.version.string
# Load the package
library(limma)
# Get the version of the package
package_version <- packageVersion("limma")
print(paste("Version:", package_version))
# Get the citation information
package_citation <- citation("limma")
print(package_citation)
# Load the package
library(DESeq2)
# Get the version of the package
package_version <- packageVersion("DESeq2")
print(paste("Version:", package_version))
# Get the citation information
package_citation <- citation("DESeq2")
print(package_citation)
# Load the package
library(lfcShrink)
# Get the version of the package
package_version <- packageVersion("lfcShrink")
citation("lfcShrink")
resLFC <- lfcShrink(dds, coef ="Treatment_MPXV.clade.I.infected_vs_mock"  , type = "apeglm")
citation("stats")
